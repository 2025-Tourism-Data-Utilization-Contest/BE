name: Java CI/CD with Gradle

on:
  push:
    branches: [ "develop" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-docker-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Generate application.yml from template
        run: |
          envsubst < src/main/resources/application.yml.template > src/main/resources/application.yml
        env:
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
          NAVER_REDIRECT_URI: ${{ secrets.NAVER_REDIRECT_URI }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
          KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_ACCESS_TOKEN_EXPIRATION: ${{ secrets.JWT_ACCESS_TOKEN_EXPIRATION }}
          JWT_REFRESH_TOKEN_EXPIRATION: ${{ secrets.JWT_REFRESH_TOKEN_EXPIRATION }}
          JWT_COOKIE_DOMAIN: ${{ secrets.JWT_COOKIE_DOMAIN }}
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
          S3_REGION: ${{ secrets.S3_REGION }}
          CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}
          CORS_ALLOWED_METHODS: ${{ secrets.CORS_ALLOWED_METHODS }}
          CORS_ALLOWED_HEADERS: ${{ secrets.CORS_ALLOWED_HEADERS }}
          CORS_ALLOW_CREDENTIALS: ${{ secrets.CORS_ALLOW_CREDENTIALS }}
          CORS_MAX_AGE: ${{ secrets.CORS_MAX_AGE }}
          FRONTEND_HOME_URL: ${{ secrets.FRONTEND_HOME_URL }}
          SPRINGDOC_API_DOCS_PATH: ${{ secrets.SPRINGDOC_API_DOCS_PATH }}
          SPRINGDOC_SWAGGER_UI_PATH: ${{ secrets.SPRINGDOC_SWAGGER_UI_PATH }}
          SPRINGDOC_PACKAGES_TO_SCAN: ${{ secrets.SPRINGDOC_PACKAGES_TO_SCAN }}

      - name: Build Spring Boot Application (with Gradle summary)
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean bootJar

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-showing .

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push Docker image to DockerHub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-showing

  run-docker-image-on-ec2:
    name: Deploy on EC2
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      - name: Pull latest Docker image
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-showing

      - name: Stop and remove existing container
        run: |
          sudo docker stop spring || true
          sudo docker rm -f spring || true

      - name: Run new container
        run: |
          sudo docker run --name spring \
            --network app_showing-network \
            -d \
            -p ${{ secrets.SERVER_PORT }}:${{ secrets.SERVER_PORT }} \
            -e SERVER_PORT=${{ secrets.SERVER_PORT }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-showing

      - name: Clean up unused Docker images
        run: sudo docker system prune -f
