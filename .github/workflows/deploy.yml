name: Java CI/CD with Gradle

# develop 브랜치에 push가 발생할 경우 동작
on:
  push:
    branches: [ "develop" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Java 21 세팅
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: clean bootJar

      # template로부터 application.yml 작성
      - name: Create application.yml from template
        run: |
          cp src/main/resources/application.yml.template src/main/resources/application.yml
          envsubst < src/main/resources/application.yml.template > src/main/resources/application.yml
        env:
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
          NAVER_REDIRECT_URI: ${{ secrets.NAVER_REDIRECT_URI }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
          KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_ACCESS_TOKEN_EXPIRATION: ${{ secrets.JWT_ACCESS_TOKEN_EXPIRATION }}
          JWT_REFRESH_TOKEN_EXPIRATION: ${{ secrets.JWT_REFRESH_TOKEN_EXPIRATION }}
          JWT_COOKIE_DOMAIN: ${{ secrets.JWT_COOKIE_DOMAIN }}
          CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}
          CORS_ALLOWED_METHODS: ${{ secrets.CORS_ALLOWED_METHODS }}
          CORS_ALLOWED_HEADERS: ${{ secrets.CORS_ALLOWED_HEADERS }}
          CORS_ALLOW_CREDENTIALS: ${{ secrets.CORS_ALLOW_CREDENTIALS }}
          CORS_MAX_AGE: ${{ secrets.CORS_MAX_AGE }}
          FRONTEND_HOME_URL: ${{ secrets.FRONTEND_HOME_URL }}
          SPRINGDOC_API_DOCS_PATH: ${{ secrets.SPRINGDOC_API_DOCS_PATH }}
          SPRINGDOC_SWAGGER_UI_PATH: ${{ secrets.SPRINGDOC_SWAGGER_UI_PATH }}
          SPRINGDOC_PACKAGES_TO_SCAN: ${{ secrets.SPRINGDOC_PACKAGES_TO_SCAN }}

      # Docker 이미지 빌드
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-chaeum .

      # DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Docker Hub 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-chaeum

  run-docker-image-on-ec2:
    # build-docker-image 과정이 완료되어야 실행
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      # 최신 이미지를 pull
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-chaeum

      # 기존의 컨테이너 중지
      - name: docker stop container
        run: sudo docker stop spring 2>/dev/null || true

      # 최신 이미지를 컨테이너화하여 실행
      - name: docker run new container
        run: |
          sudo docker run --name spring \
            --network app_chaeum-network \
            --rm -d \
            -p ${{ secrets.SERVER_PORT }}:${{ secrets.SERVER_PORT }} \
            -e SERVER_PORT=${{ secrets.SERVER_PORT }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-chaeum

      # 미사용 이미지 정리
      - name: delete old docker image
        run: sudo docker system prune -f
