name: Java CI/CD with Gradle

on:
  push:
    branches: [ "develop" ]
  workflow_dispatch:

permissions:
  contents: read

env:  # 공통 환경 변수 선언
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-showing

jobs:
  build-docker-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Generate application.yml from template
        run: |
          echo "Generating application.yml..."
          for var in \
            SERVER_PORT DB_URL DB_USERNAME DB_PASSWORD \
            REDIS_HOST REDIS_PORT REDIS_PASSWORD \
            NAVER_CLIENT_ID NAVER_CLIENT_SECRET NAVER_REDIRECT_URI \
            KAKAO_CLIENT_ID KAKAO_CLIENT_SECRET KAKAO_REDIRECT_URI \
            JWT_SECRET JWT_ACCESS_TOKEN_EXPIRATION JWT_REFRESH_TOKEN_EXPIRATION JWT_COOKIE_DOMAIN \
            BUCKET_NAME S3_ACCESS_KEY S3_SECRET_KEY S3_REGION \
            CORS_ALLOWED_ORIGINS CORS_ALLOWED_METHODS CORS_ALLOWED_HEADERS \
            CORS_ALLOW_CREDENTIALS CORS_MAX_AGE \
            FRONTEND_HOME_URL \
            SPRINGDOC_API_DOCS_PATH SPRINGDOC_SWAGGER_UI_PATH SPRINGDOC_PACKAGES_TO_SCAN
          do
            export "$var=${{ secrets[format('{0}', var)] }}"
          done

          envsubst < src/main/resources/application.yml.template > src/main/resources/application.yml

      - name: Build Spring Boot Application
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean bootJar

      - name: Build Docker image
        run: docker build -t $IMAGE_NAME .

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push Docker image to DockerHub
        run: docker push $IMAGE_NAME

  run-docker-image-on-ec2:
    name: Deploy on EC2
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      - name: Pull latest Docker image
        run: sudo docker pull $IMAGE_NAME

      - name: Stop and remove existing container
        run: |
          sudo docker stop spring || true
          sudo docker rm -f spring || true

      - name: Run new container
        run: |
          sudo docker run --name spring \
            --network app_showing-network \
            -d \
            -p ${{ secrets.SERVER_PORT }}:${{ secrets.SERVER_PORT }} \
            $(printf -- "-e %s=${{ secrets[%s] } } " \
              SERVER_PORT DB_URL DB_USERNAME DB_PASSWORD \
              REDIS_HOST REDIS_PORT REDIS_PASSWORD \
              NAVER_CLIENT_ID NAVER_CLIENT_SECRET NAVER_REDIRECT_URI \
              KAKAO_CLIENT_ID KAKAO_CLIENT_SECRET KAKAO_REDIRECT_URI \
              JWT_SECRET JWT_ACCESS_TOKEN_EXPIRATION JWT_REFRESH_TOKEN_EXPIRATION JWT_COOKIE_DOMAIN \
              BUCKET_NAME S3_ACCESS_KEY S3_SECRET_KEY S3_REGION \
              CORS_ALLOWED_ORIGINS CORS_ALLOWED_METHODS CORS_ALLOWED_HEADERS \
              CORS_ALLOW_CREDENTIALS CORS_MAX_AGE \
              FRONTEND_HOME_URL \
              SPRINGDOC_API_DOCS_PATH SPRINGDOC_SWAGGER_UI_PATH SPRINGDOC_PACKAGES_TO_SCAN) \
            $IMAGE_NAME

      - name: Clean up unused Docker images
        run: sudo docker system prune -f
